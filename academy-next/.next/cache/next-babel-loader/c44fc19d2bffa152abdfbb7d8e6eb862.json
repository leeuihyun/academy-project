{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from \"axios\";\nimport { takeLatest, all, call, put, delay } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_SUCCESS, LOG_IN_REQUEST } from \"../../academy-react/src/reducers/auth\";\n\nfunction logInApi() {\n  return axios.post(\"/login\");\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/iuihyeon/Desktop/academy/academy-project/academy-next/sagas/user.js"],"names":["logIn","watchLogIn","userSaga","axios","takeLatest","all","call","put","delay","LOG_IN_FAILURE","LOG_IN_SUCCESS","LOG_IN_REQUEST","logInApi","post","action","type","data","console","error","response","fork"],"mappings":";;oDAWUA,K;qDAgBAC,U;qDAGeC,Q;;AA9BzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,uCAJP;;AAMA,SAASC,QAAT,GAAoB;AAChB,SAAOT,KAAK,CAACU,IAAN,CAAW,QAAX,CAAP;AACH;;AACD,SAAUb,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMD,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEL,cADA;AAENM,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQC,UAAAA,OAAO,CAACC,KAAR;AATR;AAUQ,iBAAMX,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEN,cADA;AAENO,YAAAA,IAAI,EAAE,YAAMG,QAAN,CAAeH;AAFf,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,UAAU,CAACO,cAAD,EAAiBX,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CAACe,IAAI,CAACnB,UAAD,CAAL,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\nimport { takeLatest, all, call, put, delay } from \"redux-saga/effects\";\nimport {\n    LOG_IN_FAILURE,\n    LOG_IN_SUCCESS,\n    LOG_IN_REQUEST,\n} from \"../../academy-react/src/reducers/auth\";\n\nfunction logInApi() {\n    return axios.post(\"/login\");\n}\nfunction* logIn(action) {\n    try {\n        //const res = yield call(logInApi, action.data);\n        yield delay(1000);\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (error) {\n        console.error(error);\n        yield put({\n            type: LOG_IN_FAILURE,\n            data: error.response.data,\n        });\n    }\n}\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nexport default function* userSaga() {\n    yield all([fork(watchLogIn)]);\n}\n"]},"metadata":{},"sourceType":"module"}